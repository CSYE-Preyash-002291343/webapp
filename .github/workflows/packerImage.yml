name: packerImage Build

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Install PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-client

      - name: Start PostgreSQL service
        run: |
          sudo systemctl start postgresql.service
          sudo systemctl enable postgresql.service
          sudo systemctl status postgresql.service

      - name: Wait for PostgreSQL to be ready
        run: until pg_isready -h localhost -p 5432; do sleep 3; done

      - name: Create PostgreSQL user and database
        run: |
          sudo -u postgres psql -c "CREATE USER runner WITH SUPERUSER CREATEDB PASSWORD '${{ secrets.DB_PASS }}';"
          sudo -u postgres createdb ${{ secrets.DB_NAME }}

      - uses: actions/checkout@v2

      - name: Setup NodeJS Environment
        uses: actions/setup-node@v3
        with:
          node-version: "20.14.0"

      - name: Install dependencies
        run: npm install

      - name: Run tests
        env:
          DB_USER: ${{ secrets.DB_USER_GITHUB }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: 5432
        run: npm run test:DB -- --forceExit

  #pack the webapp and create .env file and build the packer image
  packer:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Archieve the webapp
        run: |
          cd ..
          tar -czvf webapp.tar.gz webapp

      - name: AWS Credential Setup
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_VALUE }}
          aws-region: us-east-1

      - name: create .env file
        run: |
          echo "PORT=${{ secrets.PORT}}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT}}" >> .env

      - name: Packer Build
        run: |
          cd packer/
          packer init .        
          AMI_ID=$(packer build -var 'Port=${{ secrets.PORT }}' \
           -var 'db_user=${{ secrets.DB_USER }}' \
          -var 'db_pass=${{ secrets.DB_PASS }}' \
          -var 'db_name=${{ secrets.DB_NAME }}' \
          -var 'amiUsers=${{ secrets.AWS_USER }}' \
          -var 'aws_region=${{ vars.REGION }}' \
          -var 'source_ami=${{ vars.AMI }}' \
          -var 'subnet_id=${{ vars.SUBNET }}' aws.pkr.hcl | grep -oP 'ami-\w{8,17}' | tail -1)

          echo "Created AMI ID: $AMI_ID"
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      - name: Setup AWS Credentials (Demo Environment)
        if: ${{ vars.ENVIRONMENT}} == 'demo'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Update Launch Template Version
        run: |
          echo "Fetching Template ID"
          TEMPLATE_ID=$(aws ec2 describe-launch-templates \
            --filters "Name=launch-template-name,Values=${{ vars.LAUNCH_TEMPLATE_NAME }}" \
            --query 'LaunchTemplates[0].LaunchTemplateId' \
            --output text)

          echo "Fetched Template ID: $TEMPLATE_ID"
          echo "TEMPLATE_ID=$TEMPLATE_ID" >> $GITHUB_ENV

          echo "Creating New Launch Template Version"
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id ${TEMPLATE_ID} \
            --source-version '$Latest' \
            --launch-template-data "{\"ImageId\":\"${AMI_ID}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Refresh Auto Scaling Group
        run: |
          echo "Starting instance refresh for ASG: ${{ vars.ASG_NAME }}"
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ vars.ASG_NAME }} \
            --query 'InstanceRefreshId' \
            --output text)

          echo "Monitoring instance refresh status..."
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ vars.ASG_NAME }} \
              --instance-refresh-ids ${REFRESH_ID} \
              --query 'InstanceRefreshes[0].Status' \
              --output text)

            echo "Current refresh status: ${STATUS}"

            if [ "${STATUS}" = "Successful" ]; then
              echo "Instance refresh completed successfully"
              exit 0
            elif [ "${STATUS}" = "Failed" ] || [ "${STATUS}" = "Cancelled" ]; then
              echo "Instance refresh failed or was cancelled"
              exit 1
            fi

            sleep 30
          done
